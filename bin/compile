#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

echo '---- > Downloading and installing ffmpeg'

indent() {
  sed -u 's/^/       /'
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
VENDOR_BIN_DIR="$BUILD_DIR/vendor/bin"
PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg.sh"

PROFILE_PATH1="$BUILD_DIR/.profile.d/ffmpeg-10bit.sh"
PROFILE_PATH2="$BUILD_DIR/.profile.d/ffprobe.sh"
PROFILE_PATH3="$BUILD_DIR/.profile.d/ffserver.sh"
PROFILE_PATH4="$BUILD_DIR/.profile.d/qt-faststart.sh"


FFMPEG_BIN_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
if [ -f "$ENV_DIR/FFMPEG_BIN_URL" ]; then
  FFMPEG_BIN_URL=$(cat $ENV_DIR/FFMPEG_BIN_URL)
fi
FFMPEG_FILE=${FFMPEG_BIN_URL##*/}

mkdir="mkdir -p"
case ${FFMPEG_FILE##*.} in
  bz2) tar="tar xj" ;;
  gz)  tar="tar xz" ;;
  xz)  tar="tar x"  ;;
  *)
    echo "Fail to uncompress $FFMPEG_FILE because only xz, gzip, bzip2 are supported." | indent
    exit 1
    ;;
esac
download="curl -L -s --create-dirs -o"
extract="${tar} -C $VENDOR_BIN_DIR --strip-components 1 --wildcards -f"


echo "-----> Installing ffmpeg, ffmpeg-10bit, ffprobe, ffserver and qt-faststart ..."

$mkdir $VENDOR_BIN_DIR
$mkdir ${PROFILE_PATH%/*}

$mkdir ${PROFILE_PATH1%/*}
$mkdir ${PROFILE_PATH2%/*}
$mkdir ${PROFILE_PATH3%/*}
$mkdir ${PROFILE_PATH4%/*}



if [ ! -f "$CACHE_DIR/$FFMPEG_FILE" ]; then
  echo "downloading ffmpeg: $FFMPEG_BIN_URL" | indent
  $download $CACHE_DIR/$FFMPEG_FILE $FFMPEG_BIN_URL
  #TODO sha256sum $CACHE_DIR/$FFMPEG_FILE
fi

echo "extacting ffmpeg: $FFMPEG_BIN_URL" | indent
echo "$extract $CACHE_DIR/$FFMPEG_FILE" | indent
$extract $CACHE_DIR/$FFMPEG_FILE 

echo "exporting PATH" | indent
echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH

echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH1
echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH2
echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH3
echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH4




echo "-----> Downloading and Installing libsndfile"
# change to the the BUILD_DIR ($1)

## download the binary (-O) silently (-s)
#curl https://s3-eu-west-1.amazonaws.com/soundtracktor-public/libsndfile-1.0.28.tar.gz -s -O
## make a directory to untar (like unzip) the binary
#mkdir -p vendor/libsndfile
## untar the binary to the directory we want
#tar -C vendor/libsndfile -xvf libsndfile-1.0.28.tar.gz

#CFLAGS="$CFLAGS -I ${1}/vendor/libsndfile/lib/pkgconfig"
#export CFLAGS

#PKG_CONFIG_PATH="${1}"/vendor/libsndfile/lib/pkgconfig:"${PKG_CONFIG_PATH}"
#export PKG_CONFIG_PATH

#popd

echo "---- > Installing Go"
cd $1
pushd .

# Go releases for Darwin beginning with 1.2rc1
# have included more than one build, depending
# on the specific version of Mac OS X. Try to
# account for that, but don't try too hard.
# This doesn't affect Heroku builds, it's only
# for testing on Darwin systems.
platext() {
    case $1 in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*) return ;;
    esac
    case $(uname|tr A-Z a-z) in
    darwin) printf %s -osx10.8 ;;
    esac
}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo http://go.googlecode.com/files/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(dirname $(dirname $0))
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
}

if test -f $build/.godir
then
    name=$(cat $build/.godir)
    ver=go$(cat $build/goversion)
else
    echo >&2 " !     A .godir is required. For instructions:"
    echo >&2 " !     http://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku"
    exit 1
fi

echo $ver

file=${GOFILE:-$ver.$(uname|tr A-Z a-z)-amd64$(platext $ver).tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

echo $url

if test -e $build/bin && ! test -d $build/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi

if test -d $cache/$ver/go
then
    echo "-----> Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    pushd
    cd $cache/$ver
    echo -n "-----> Installing $ver..."
    curl -sO $url
    tar zxf $file
    rm -f $file
    echo " done"
    popd
fi

mkdir -p $build/bin
mkdir -p $build/.go
cp -R $cache/$ver/go $build/.goroot

# echo gobin:  $GOBIN
# echo goroot: $GOROOT
# echo gopath: $GOPATH

GOBIN=$build/bin export GOBIN
GOROOT=$build/.goroot export GOROOT
GOPATH=$build/.go export GOPATH
PATH=$GOROOT/bin:$PATH

# echo debugging...
# for i in $build $GOBIN $GOROOT $GOPATH
# do
#     echo
#     echo
#     echo $i
#     echo
#     find $i
# done

# if ! (which hg >/dev/null && which bzr >/dev/null)
# then
#     echo -n "       Installing Virtualenv..."
#     virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
#     . $venv/bin/activate > /dev/null 2>&1
#     echo " done"

#     #echo -n "       Installing Mercurial..."
#     #pip install mercurial > /dev/null 2>&1
#     #echo " done"

#     #echo -n "       Installing Bazaar..."
#     #pip install bzr > /dev/null 2>&1
#     #echo " done"
# fi

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
env_dir="$3"
if [ -d "$env_dir" ]
then
    ln -sfn $build /app/code
    for cgo_opt in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS
    do
        if [ -f "$env_dir/$cgo_opt" ]
        then
            export "$cgo_opt=$(cat "$env_dir/$cgo_opt")"
        fi
    done
fi

FLAGS=(-tags heroku)
if test -f "$env_dir/GO_GIT_DESCRIBE_SYMBOL"
then
    git_describe=$(git describe --tags --always)
    git_describe_symbol=$(cat "$env_dir/GO_GIT_DESCRIBE_SYMBOL")
    FLAGS=(${FLAGS[@]} -ldflags "-X $git_describe_symbol $git_describe")
fi

#update godep
#echo "-----> updating/installing godep"
#go get -u github.com/golang/dep/cmd/dep
#export GO15VENDOREXPERIMENT=1

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
echo '=== debug'
pwd
find .
echo '=== debug'
if test -e $build/vendor
then
  echo "-----> vendor folder found."
else
  echo "-----> Running folder not found. Running: go mod vendor"
  go mod vendor
if

echo "-----> Copying workspace"
mv vendor/* $GOPATH/src
rm -r vendor
echo "-----> Running: go install -v ${FLAGS[@]} ./..."
go install -v "${FLAGS[@]}" ./...

echo "-----> adding ~/bin to path"
mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh

echo "-----> installing revel"
mkdir $GOPATH/bin
go get github.com/revel/cmd/revel

echo "-----> building executable"
echo "       this is just to launch faster than running revel run mashday prod $PORT"
echo "       but it might take a few minutes now..."
if [ -d ./exec ] ; then
    rm -r ./exec >> /dev/null
fi
if [ -d /tmp/mashday ] ; then
    rm -r /tmp/mashday >> /dev/null
fi

$GOBIN/revel build mashday /tmp/mashday prod
mv /tmp/mashday $build/exec

echo "-----> Now we want to delete everything else big"
cd $1
rm -r .go/src
rm -r ./public
rm -r ./test-scripts

echo "-----> Displaying top 100 files and dirs with sizes"
find . -exec du -sk {} \; | sort -n | tail -100
